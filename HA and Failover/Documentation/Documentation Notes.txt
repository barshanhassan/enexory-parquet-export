Pre-requisites and tips:

HA.py must be run locally on the same node as ProxySQL. Combined they form Middleware Node.
MySQL 5.7 must be installed on all nodes except for Middleware Node.
ProxySQL 2.6.2, Python 3.10, mysql-connector-python==9.4.0 via PIP must be installed on Middleware Node.
GTIDs must be enabled on all MySQL nodes.
If HA.py ever run, crashes or restarted. Make sure all nodes are behaving correctly before re-run (All nodes have read-writes workings, replicas are correctly replicating master, ProxySQL is working and reflects the correct topology).
Always have an odd number of MySQL nodes to allow quorum to work effectively.
Make sure all MySQL nodes can connect to each other via SSH and Middleware Node can SSH to any MySQL node (this means having the correct keys and making all respective nodes trust each other).

All MySQL nodes must be read_only = OFF in the my.cnf file. All MySQL nodes must have a different server id, this can be set by having different values for 'server-id' in each MySQL node's my.cnf file.
Example my.cnf file:
[mysqld]
server-id=1
log_bin=mysql-bin
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_format=ROW
log_slave_updates = ON
expire_logs_days = 3
read_only = OFF
bind-address = 0.0.0.0

Replication must be done using GTIDs.
Example:
STOP SLAVE;
CHANGE MASTER TO
  MASTER_AUTO_POSITION=1,
  MASTER_HOST='<Master Node>',
  MASTER_USER='<Replica Username>',
  MASTER_PASSWORD='<Replica Password>';
START SLAVE;

Replica User must be on all nodes and have the following permissions: ALL PRIVILEGES
Example:
GRANT ALL PRIVILEGES ON *.* TO '<Replica Username>'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES;

Monitor User must be on all nodes and have the following permissions: REPLICATION CLIENT, REPLICATION SLAVE, PROCESS
Example:
GRANT REPLICATION CLIENT, REPLICATION SLAVE, PROCESS ON *.* TO '<Monitor Username>'@'%';

App User will be the user the clients use to interact with proxysql node on port 3306
App User must be on all nodes and have the following permissions: SELECT, INSERT, UPDATE, DELETE
Example:
GRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO '<App Username>@'%' WITH GRANT OPTION;

To access admin mode on proxysql, to set the ProxySQL rules, users, servers, variables etc. Please access it using -uadmin -padmin using port 6032 locally. 

The following rules allow ProxySQL to work, they may be optimized but it is risky:
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (10, '<Master Node IP>', 3306, 0);
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (20, '<Master Node IP>', 3306, 5);
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (20, '<Replica 1 Node IP>', 3306, 5);
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (20, '<Replica 2 Node IP>', 3306, 5);
LOAD MYSQL SERVERS TO RUNTIME;
SAVE MYSQL SERVERS TO DISK;

INSERT INTO mysql_users(username, password, default_hostgroup, transaction_persistent) VALUES ('<App Username>', '<App User Password>', 10, 1);
INSERT INTO mysql_users(username, password, default_hostgroup) VALUES ('<Monitor Username>', '<Monitor User Password>', 0);
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS TO DISK;

INSERT INTO mysql_query_rules(rule_id,active,match_pattern,destination_hostgroup,apply) VALUES (1,1,'^SELECT',20,1), (2,1,'.*',10,1);
LOAD MYSQL QUERY RULES TO RUNTIME;
SAVE MYSQL QUERY RULES TO DISK;

UPDATE global_variables
SET variable_value='<Monitor Username>'
WHERE variable_name='mysql-monitor_username';
UPDATE global_variables
SET variable_value='<Monitor Password>'
WHERE variable_name='mysql-monitor_password';

SET mysql-port=3306;
SET mysql-monitor_ping_interval=1000;
SET mysql-monitor_connect_interval=1000;
SET mysql-monitor_slave_lag_when_null=5;

LOAD ADMIN VARIABLES TO RUNTIME;
SAVE ADMIN VARIABLES TO DISK;
LOAD MYSQL VARIABLES TO RUNTIME;
SAVE MYSQL VARIABLES TO DISK;

To get started:
After all pre-requisites are met, and nodes are set up (Healthy MySQL topology with GTID replication, ProxySQL setup with Python, users with correct privileges and SSH configured), setup HA.py with the correct variables via any test editor. Tip: PROXYSQL_NODE and NODE_LIST must be populated with Node IPs. Run the script when ready.



TODO:
**if proxysql local goes down, pause HA.py** i think this already happens in a way.
add a way to stop the script safely.