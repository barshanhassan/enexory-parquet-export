# ----------------------------- VARIABLES -----------------------------

MYSQL_ROOT_USER='root'
MYSQL_ROOT_PW='root'
REPL_USER='repl'
REPL_PASS='replpass'
MON_USER='monitor'
MON_PASS='monitorpass'
APP_USER='appuser'
APP_PASS='proxypass'

MASTER_PORT=1001
REPL1_PORT=1002
REPL2_PORT=1003

PROXY_ADMIN_PORT=6032
PROXY_CLIENT_PORT=3306

# ----------------------------- SETUP MYSQL CONFIGS -----------------------------

mkdir -p ~/mysql-test/{master,replica1,replica2}

cat > ~/mysql-test/master/my.cnf <<'EOF'
[mysqld]
server-id=1
log_bin=mysql-bin
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_format=ROW
log_slave_updates = ON
expire_logs_days = 3
read_only = OFF
bind-address = 0.0.0.0
EOF

cat > ~/mysql-test/replica1/my.cnf <<'EOF'
[mysqld]
server-id=2
log_bin=mysql-bin
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_format=ROW
log_slave_updates = ON
expire_logs_days = 3
read_only = OFF
bind-address = 0.0.0.0
EOF

cat > ~/mysql-test/replica2/my.cnf <<'EOF'
[mysqld]
server-id=3
log_bin=mysql-bin
gtid_mode=ON
enforce_gtid_consistency=ON
binlog_format=ROW
log_slave_updates = ON
expire_logs_days = 3
read_only = OFF
bind-address = 0.0.0.0
EOF

# ----------------------------- CREATE DOCKER CONTAINERS -----------------------------

docker rm -f mysql-master mysql-replica1 mysql-replica2 proxysql mysql-client sc
docker network rm mysql-net

# network
docker network create \
  --subnet=172.18.0.0/16 \
  mysql-net

# master
docker run -d --init --name mysql-master --hostname mysql-master --network mysql-net --ip 172.18.0.2 \
  -v ~/mysql-test/master/my.cnf:/etc/mysql/my.cnf:ro \
  -p ${MASTER_PORT}:3306 \
  custom-mysql:5.7-debian-ram

# replica1
docker run -d --init --name mysql-replica1 --hostname mysql-replica1 --network mysql-net --ip 172.18.0.3 \
  -v ~/mysql-test/replica1/my.cnf:/etc/mysql/my.cnf:ro \
  -p ${REPL1_PORT}:3306 \
  custom-mysql:5.7-debian-ram

# replica2
docker run -d --init --name mysql-replica2 --hostname mysql-replica2 --network mysql-net --ip 172.18.0.4 \
  -v ~/mysql-test/replica2/my.cnf:/etc/mysql/my.cnf:ro \
  -p ${REPL2_PORT}:3306 \
  custom-mysql:5.7-debian-ram

# proxysql
docker run -d \
  --name proxysql \
  --hostname proxysql \
  --network mysql-net --ip 172.18.0.5 \
  -p ${PROXY_ADMIN_PORT}:6032 \
  -p ${PROXY_CLIENT_PORT}:3306 \
  proxysql/proxysql:2.6.2

# MySQL client
docker run -d \
  --name mysql-client \
  --network mysql-net --ip 172.18.0.6 \
  --hostname mysql-client \
  mysql:5.7.42-debian tail -f /dev/null

# SC
docker run -d \
  --name sc \
  --network mysql-net --ip 172.18.0.7 \
  --hostname sc \
  ubuntu:22.04 tail -f /dev/null

# ----------------------------- CREATE TEST TABLE IN ADVANCE -----------------------------

sleep 10

docker exec -i mysql-master mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';"
docker exec -i mysql-replica1 mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';"
docker exec -i mysql-replica2 mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';"

docker exec -i mysql-master mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "
CREATE DATABASE IF NOT EXISTS testdb;
USE testdb;
CREATE TABLE IF NOT EXISTS test (
    id INT AUTO_INCREMENT PRIMARY KEY,
    x INT
);"

# docker exec -i mysql-master mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "DROP TABLE IF EXISTS testdb.test;"

# ----------------------------- SET UP REPLICATION ON MYSQL CONTAINERS -----------------------------

docker exec -it mysql-master mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "
CREATE USER IF NOT EXISTS '$REPL_USER'@'%' IDENTIFIED BY '$REPL_PASS';
GRANT ALL PRIVILEGES ON *.* TO '$REPL_USER'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES;
"

docker exec -it mysql-replica1 mysql -h127.0.0.1  -uroot -p$MYSQL_ROOT_PW -e "
CREATE USER IF NOT EXISTS '$REPL_USER'@'%' IDENTIFIED BY '$REPL_PASS';
GRANT ALL PRIVILEGES ON *.* TO '$REPL_USER'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES;
"

docker exec -it mysql-replica2 mysql -h127.0.0.1  -uroot -p$MYSQL_ROOT_PW -e "
CREATE USER IF NOT EXISTS '$REPL_USER'@'%' IDENTIFIED BY '$REPL_PASS';
GRANT ALL PRIVILEGES ON *.* TO '$REPL_USER'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES;
"

docker exec -it mysql-replica1 mysql -uroot -p$MYSQL_ROOT_PW -e "
STOP SLAVE;
CHANGE MASTER TO
  MASTER_AUTO_POSITION=1,
  MASTER_HOST='mysql-master',
  MASTER_USER='$REPL_USER',
  MASTER_PASSWORD='$REPL_PASS';
START SLAVE;
"

docker exec -it mysql-replica2 mysql -uroot -p$MYSQL_ROOT_PW -e "
STOP SLAVE;
CHANGE MASTER TO
  MASTER_AUTO_POSITION=1,
  MASTER_HOST='mysql-master',
  MASTER_USER='$REPL_USER',
  MASTER_PASSWORD='$REPL_PASS';
START SLAVE;
"

# ----------------------------- SETUP PROXYSQL -----------------------------

docker exec -it mysql-master mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "
CREATE USER IF NOT EXISTS '$MON_USER'@'%' IDENTIFIED BY '$MON_PASS';
GRANT REPLICATION CLIENT, REPLICATION SLAVE, PROCESS ON *.* TO '$MON_USER'@'%';

CREATE USER IF NOT EXISTS '$APP_USER'@'%' IDENTIFIED BY '$APP_PASS';
GRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO '$APP_USER'@'%';

FLUSH PRIVILEGES;
"

docker exec -it proxysql mysql -uadmin -padmin -h127.0.0.1 -P6032 -e "
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (10, '172.18.0.2', 3306, 0);
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (20, '172.18.0.2', 3306, 5);
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (20, '172.18.0.3', 3306, 5);
INSERT INTO mysql_servers(hostgroup_id, hostname, port, max_replication_lag) VALUES (20, '172.18.0.4', 3306, 5);
LOAD MYSQL SERVERS TO RUNTIME;
SAVE MYSQL SERVERS TO DISK;

INSERT INTO mysql_users(username, password, default_hostgroup, transaction_persistent) VALUES ('$APP_USER', '$APP_PASS', 10, 1);
INSERT INTO mysql_users (username, password, default_hostgroup) VALUES ('$MON_USER', '$MON_PASS', 0);
LOAD MYSQL USERS TO RUNTIME;
SAVE MYSQL USERS TO DISK;

INSERT INTO mysql_query_rules(rule_id,active,match_pattern,destination_hostgroup,apply) VALUES (1,1,'^SELECT',20,1), (2,1,'.*',10,1);
LOAD MYSQL QUERY RULES TO RUNTIME;
SAVE MYSQL QUERY RULES TO DISK;

UPDATE global_variables 
SET variable_value='admin:admin;admin2:admin2' 
WHERE variable_name='admin-admin_credentials';
UPDATE global_variables
SET variable_value='$MON_USER'
WHERE variable_name='mysql-monitor_username';
UPDATE global_variables
SET variable_value='$MON_PASS'
WHERE variable_name='mysql-monitor_password';

UPDATE global_variables SET variable_value='0.0.0.0:3306' WHERE variable_name='mysql-interfaces';
SET mysql-monitor_ping_interval=1000;
SET mysql-monitor_connect_interval=1000;
SET mysql-monitor_slave_lag_when_null=5;

LOAD ADMIN VARIABLES TO RUNTIME;
SAVE ADMIN VARIABLES TO DISK;
LOAD MYSQL VARIABLES TO RUNTIME;
SAVE MYSQL VARIABLES TO DISK;
"

# ----------------------------- TEST REPLICATION AND PROXYSQL -----------------------------

# Insert '1'
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
INSERT INTO test (x) VALUES (1);"

# Select all
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
SELECT * FROM test;"

# Stop master
docker network disconnect mysql-net mysql-master

# Insert '2' (may fail/block if ProxySQL routes writes only to master)
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
INSERT INTO test (x) VALUES (2);"

# Select all
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
SELECT * FROM test;"

# Start master
docker network connect mysql-net mysql-master

# Insert '3'
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
INSERT INTO test (x) VALUES (3);"

# Select all via ProxySQL
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
SELECT * FROM test;"

# Check replica2 directly
docker exec -i mysql-replica2 mysql -uroot -p$MYSQL_ROOT_PW -D testdb -e "
SELECT * FROM test;"

# Delete table data
docker exec -i mysql-master mysql -uroot -p$MYSQL_ROOT_PW -D testdb -e "
DELETE FROM testdb.test WHERE 1;"

# Select all via ProxySQL
docker exec -i mysql-client mysql -hproxysql -P3306 -u$APP_USER -p$APP_PASS -D testdb -e "
SELECT * FROM test;"

# ----------------------------- SIMULATE FATAL ERROR ON REPLICA -----------------------------

docker exec -i mysql-replica2 mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "INSERT INTO testdb.test VALUES(100, 3);"
docker exec -i mysql-master mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "INSERT INTO testdb.test VALUES(100, 3);"

docker exec -i mysql-replica1 mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "SHOW SLAVE STATUS\G"
docker exec -i mysql-replica2 mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PW -e "SHOW SLAVE STATUS\G"

# ----------------------------- SET UP SC CONTAINER -----------------------------

docker exec -it sc bash -c '
  apt-get update
  apt-get install -y nano
  apt install -y python3 python3.10-venv
  cd /root
  python3 -m venv .venv
  source .venv/bin/activate
  pip install mysql-connector-python==9.4.0 keyboard==0.13.5 sib-api-v3-sdk==7.6.0
'

docker exec -it sc bash -c '
  nano /root/orchestrator.py
'

docker exec -it sc bash -c '
  nano /root/t.py
'

# ----------------------------- TESTING HA.py -----------------------------

docker exec -i mysql-master mysql -uroot -p$MYSQL_ROOT_PW -D testdb -e "
DELETE FROM testdb.test WHERE 1;"

docker exec -i mysql-master mysql -uroot -p$MYSQL_ROOT_PW -e "
CREATE DATABASE IF NOT EXISTS testdb;
USE testdb;
CREATE TABLE IF NOT EXISTS test (
    id INT AUTO_INCREMENT PRIMARY KEY,
    x INT
);"

# cd /root
# source .venv/bin/activate
# python orchestrator.py --mysql-user 'repl' --mysql-password 'replpass' --proxysql-admin 'admin2' --proxysql-pass 'admin2' --proxysql-node '172.18.0.5' --email-to ''
# python t.py

docker network disconnect mysql-net mysql-master
docker network connect --ip 172.18.0.2 mysql-net mysql-master
docker network disconnect mysql-net mysql-replica1
docker network connect --ip 172.18.0.3 mysql-net mysql-replica1
docker network disconnect mysql-net mysql-replica2
docker network connect --ip 172.18.0.4 mysql-net mysql-replica2